// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ATHLETE  // Deportista
  TRAINER  // Entrenador
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String    // Hashed password
  name      String?
  role      Role      @default(ATHLETE)
  routines  Routine[]
  createdRoutines Routine[] @relation("RoutineCreator")
  metrics   UserMetrics?
  workoutSessions WorkoutSession[]

  // Relaci√≥n entrenador-deportista
  trainers  TrainerAthlete[] @relation("AthleteTrainers")
  athletes  TrainerAthlete[] @relation("TrainerAthletes")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Routine {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  creator          User              @relation("RoutineCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdBy        Int
  routineExercises RoutineExercise[]
  workoutSessions  WorkoutSession[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("routines")
}

model ExerciseCategory {
  id        Int        @id @default(autoincrement())
  name      String
  exercises Exercise[]

  @@map("exercise_categories")
}

model ExerciseMuscle {
  id                 Int                         @id @default(autoincrement())
  name               String
  nameEn             String                      @map("name_en")
  isFront            Boolean                     @map("is_front")
  imageUrlMain       String                      @map("image_url_main")
  imageUrlSecondary  String                      @map("image_url_secondary")
  exercises          ExerciseMuscleRelation[]

  @@map("exercise_muscles")
}

model ExerciseEquipment {
  id        Int                        @id @default(autoincrement())
  name      String
  exercises ExerciseEquipmentRelation[]

  @@map("exercise_equipment")
}

model ExerciseLicense {
  id                 Int                   @id @default(autoincrement())
  fullName           String                @map("full_name")
  shortName          String                @map("short_name")
  url                String
  exercises          Exercise[]
  images             ExerciseImage[]
  videos             ExerciseVideo[]
  translations       ExerciseTranslation[]

  @@map("exercise_licenses")
}

model Exercise {
  id                     Int                          @id @default(autoincrement())
  uuid                   String                       @unique @default(uuid())
  created                DateTime                     @default(now())
  lastUpdate             DateTime                     @updatedAt @map("last_update")
  lastUpdateGlobal       DateTime                     @updatedAt @map("last_update_global")
  category               ExerciseCategory             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId             Int                          @map("category_id")
  license                ExerciseLicense              @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licenseId              Int                          @map("license_id")
  licenseAuthor          String?                      @map("license_author")
  muscles                ExerciseMuscleRelation[]
  equipment              ExerciseEquipmentRelation[]
  images                 ExerciseImage[]
  videos                 ExerciseVideo[]
  translations           ExerciseTranslation[]
  routineExercises       RoutineExercise[]
  sessionExercises       SessionExercise[]

  @@map("exercises")
}

model ExerciseMuscleRelation {
  id          Int            @id @default(autoincrement())
  exercise    Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId  Int            @map("exercise_id")
  muscle      ExerciseMuscle @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  muscleId    Int            @map("muscle_id")
  isPrimary   Boolean        @default(true) @map("is_primary")

  @@unique([exerciseId, muscleId, isPrimary])
  @@map("exercise_muscle_relations")
}

model ExerciseEquipmentRelation {
  id          Int               @id @default(autoincrement())
  exercise    Exercise          @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId  Int               @map("exercise_id")
  equipment   ExerciseEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId Int               @map("equipment_id")

  @@unique([exerciseId, equipmentId])
  @@map("exercise_equipment_relations")
}

model ExerciseImage {
  id                           Int             @id @default(autoincrement())
  uuid                         String          @unique @default(uuid())
  exercise                     Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId                   Int             @map("exercise_id")
  image                        String
  isMain                       Boolean         @default(false) @map("is_main")
  style                        String
  license                      ExerciseLicense @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licenseId                    Int             @map("license_id")
  licenseTitle                 String          @map("license_title")
  licenseObjectUrl             String          @map("license_object_url")
  licenseAuthor                String?         @map("license_author")
  licenseAuthorUrl             String          @map("license_author_url")
  licenseDerivativeSourceUrl   String          @map("license_derivative_source_url")
  authorHistory                String          @map("author_history") // JSON array stored as string

  @@map("exercise_images")
}

model ExerciseVideo {
  id                           Int             @id @default(autoincrement())
  uuid                         String          @unique @default(uuid())
  exercise                     Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId                   Int             @map("exercise_id")
  video                        String
  isMain                       Boolean         @default(false) @map("is_main")
  size                         Int
  duration                     String
  width                        Int
  height                       Int
  codec                        String
  codecLong                    String          @map("codec_long")
  license                      ExerciseLicense @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licenseId                    Int             @map("license_id")
  licenseTitle                 String          @map("license_title")
  licenseObjectUrl             String          @map("license_object_url")
  licenseAuthor                String?         @map("license_author")
  licenseAuthorUrl             String          @map("license_author_url")
  licenseDerivativeSourceUrl   String          @map("license_derivative_source_url")
  authorHistory                String          @map("author_history") // JSON array stored as string

  @@map("exercise_videos")
}

model ExerciseTranslation {
  id                           Int                          @id @default(autoincrement())
  uuid                         String                       @unique @default(uuid())
  name                         String
  exercise                     Exercise                     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId                   Int                          @map("exercise_id")
  description                  String
  created                      DateTime                     @default(now())
  language                     Int
  license                      ExerciseLicense              @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licenseId                    Int                          @map("license_id")
  licenseTitle                 String                       @map("license_title")
  licenseObjectUrl             String                       @map("license_object_url")
  licenseAuthor                String?                      @map("license_author")
  licenseAuthorUrl             String                       @map("license_author_url")
  licenseDerivativeSourceUrl   String                       @map("license_derivative_source_url")
  authorHistory                String                       @map("author_history") // JSON array stored as string
  aliases                      ExerciseTranslationAlias[]
  notes                        ExerciseNote[]

  @@map("exercise_translations")
}

model ExerciseTranslationAlias {
  id          Int                  @id @default(autoincrement())
  uuid        String               @unique @default(uuid())
  translation ExerciseTranslation  @relation(fields: [translationId], references: [id], onDelete: Cascade)
  translationId Int                @map("translation_id")
  alias       String

  @@map("exercise_translation_aliases")
}

model ExerciseNote {
  id          Int                  @id @default(autoincrement())
  uuid        String               @unique @default(uuid())
  translation ExerciseTranslation  @relation(fields: [translationId], references: [id], onDelete: Cascade)
  translationId Int                @map("translation_id")
  comment     String

  @@map("exercise_notes")
}

model RoutineExercise {
  id         Int      @id @default(autoincrement())
  routine    Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  sets       Int      // Number of sets
  reps       Int      // Number of repetitions
  weight     Float?   // Weight in kilograms (optional)
  rest       Int?     // Rest time in seconds
  order      Int      // Order in the routine
  createdAt  DateTime @default(now())

  @@map("routine_exercises")
}

model TrainerAthlete {
  id         Int      @id @default(autoincrement())
  trainer    User     @relation("TrainerAthletes", fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId  Int
  athlete    User     @relation("AthleteTrainers", fields: [athleteId], references: [id], onDelete: Cascade)
  athleteId  Int
  createdAt  DateTime @default(now())

  @@unique([trainerId, athleteId])
  @@map("trainer_athlete")
}

model UserMetrics {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique

  // Body measurements
  height    Float?   // Height in centimeters
  weight    Float?   // Current weight in kilograms
  age       Int?     // Age in years
  gender    String?  // Gender (optional: "male", "female", "other", "prefer_not_to_say")

  // Additional metrics
  bodyFat   Float?   // Body fat percentage
  muscleMass Float?  // Muscle mass in kilograms

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_metrics")
}

model WorkoutSession {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  routine          Routine?          @relation(fields: [routineId], references: [id], onDelete: SetNull)
  routineId        Int?
  title            String            // Session title (can be routine title or custom)
  notes            String?           // Optional notes about the session
  startedAt        DateTime          @default(now())
  completedAt      DateTime?         // Null if session is in progress
  duration         Int?              // Duration in seconds (optional)
  sessionExercises SessionExercise[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("workout_sessions")
}

model SessionExercise {
  id               Int            @id @default(autoincrement())
  session          WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId        Int
  exercise         Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId       Int
  sets             Int            // Sets completed
  reps             Int            // Reps completed
  weight           Float?         // Weight used in kg
  rest             Int?           // Rest time in seconds
  order            Int            // Order in the session
  notes            String?        // Exercise-specific notes
  createdAt        DateTime       @default(now())

  @@map("session_exercises")
}
