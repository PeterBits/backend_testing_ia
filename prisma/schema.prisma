// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ATHLETE  // Deportista
  TRAINER  // Entrenador
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String    // Hashed password
  name      String?
  role      Role      @default(ATHLETE)
  routines  Routine[]
  createdRoutines Routine[] @relation("RoutineCreator")

  // Relaci√≥n entrenador-deportista
  trainers  TrainerAthlete[] @relation("AthleteTrainers")
  athletes  TrainerAthlete[] @relation("TrainerAthletes")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Routine {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  creator          User              @relation("RoutineCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdBy        Int
  routineExercises RoutineExercise[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("routines")
}

model Exercise {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  routineExercises RoutineExercise[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("exercises")
}

model RoutineExercise {
  id         Int      @id @default(autoincrement())
  routine    Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  sets       Int      // Number of sets
  reps       Int      // Number of repetitions
  weight     Float?   // Weight in kilograms (optional)
  rest       Int?     // Rest time in seconds
  order      Int      // Order in the routine
  createdAt  DateTime @default(now())

  @@map("routine_exercises")
}

model TrainerAthlete {
  id         Int      @id @default(autoincrement())
  trainer    User     @relation("TrainerAthletes", fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId  Int
  athlete    User     @relation("AthleteTrainers", fields: [athleteId], references: [id], onDelete: Cascade)
  athleteId  Int
  createdAt  DateTime @default(now())

  @@unique([trainerId, athleteId])
  @@map("trainer_athlete")
}
